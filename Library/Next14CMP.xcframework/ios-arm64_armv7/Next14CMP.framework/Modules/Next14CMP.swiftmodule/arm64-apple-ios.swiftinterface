// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Next14CMP
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import os.log
import os
@propertyWrapper public struct StringProperty {
  public var wrappedValue: Swift.String? {
    get
    set(newValue)
  }
}
@propertyWrapper public struct BoolProperty {
  public var wrappedValue: Swift.Bool {
    get
    set(newValue)
  }
}
@propertyWrapper public struct DoubleProperty {
  public var wrappedValue: Swift.Double {
    get
    set(newValue)
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CMP : ObjectiveC.NSObject {
  @objc public static let shared: Next14CMP.CMP
  @objc override dynamic public init()
  @objc public func start(apiKey: Swift.String, settings: Next14CMP.CMPSettings = CMPSettings(), onComplete: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  public func start(apiKey: Swift.String, settings: Next14CMP.CMPSettings = CMPSettings(), completion: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  @objc public func shouldPresentCMP() -> Swift.Bool
  @objc public func present(from presenter: UIKit.UIViewController, gdprApplies: Swift.Bool = true, onComplete: (() -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CMPSettings : ObjectiveC.NSObject {
  @objc public var consentPreferenceValidityDays: Swift.Int
  @objc override dynamic public init()
  @objc public init(consentPreferenceValidityDays: Swift.Int = 180)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Logger : ObjectiveC.NSObject {
  public static var `default`: Next14CMP.LogWriter
  @objc override dynamic public init()
  @objc deinit
}
public enum LogLevel : Swift.UInt8 {
  case verbose
  case debug
  case info
  case warn
  case error
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol LogWriter {
  var level: Next14CMP.LogLevel { get set }
  func v(_ format: Swift.String, _ arguments: Swift.CVarArg...)
  func d(_ format: Swift.String, _ arguments: Swift.CVarArg...)
  func i(_ format: Swift.String, _ arguments: Swift.CVarArg...)
  func w(_ format: Swift.String, _ arguments: Swift.CVarArg...)
  func e(_ format: Swift.String, _ arguments: Swift.CVarArg...)
}
@propertyWrapper public struct IntProperty {
  public var wrappedValue: Swift.Int {
    get
    set(newValue)
  }
}
extension Next14CMP.LogLevel : Swift.Equatable {}
extension Next14CMP.LogLevel : Swift.Hashable {}
extension Next14CMP.LogLevel : Swift.RawRepresentable {}
